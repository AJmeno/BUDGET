import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt
import plotly.graph_objects as go

# Set up the app
st.set_page_config(page_title="Budgeting Tool", layout="wide")
st.title("Personal Budgeting Tool")

# Create a sidebar for user input
st.sidebar.header("Input Your Budget")

# Get user's monthly income
monthly_income = st.sidebar.number_input("Monthly Income", min_value=0.0, step=0.01)

# Get user's expenses
expense_categories = st.sidebar.text_input("Expense Categories (comma-separated)", "Rent, Utilities, Groceries, Transportation, Entertainment")
expense_amounts = st.sidebar.text_input("Expense Amounts (comma-separated)", "1000, 200, 500, 300, 200")

expense_categories = [c.strip() for c in expense_categories.split(",")]
expense_amounts = [float(a.strip()) for a in expense_amounts.split(",")]
expenses = dict(zip(expense_categories, expense_amounts))

# Get user's savings goal
savings_goal = st.sidebar.number_input("Monthly Savings Goal", min_value=0.0, step=0.01)

# Calculate the budget
total_expenses = sum(expenses.values())
total_savings = savings_goal
total_budget = monthly_income

# Display the budget
st.header("Your Budget")
col1, col2, col3 = st.columns(3)
col1.metric("Monthly Income", f"${monthly_income:.2f}")
col2.metric("Total Expenses", f"${total_expenses:.2f}")
col3.metric("Savings Goal", f"${savings_goal:.2f}")

# Display the expense breakdown
st.subheader("Expense Breakdown")
expense_data = pd.DataFrame.from_dict(expenses, orient='index')
expense_data.columns = ['Amount']
expense_data = expense_data.sort_values(by='Amount', ascending=False)
st.bar_chart(expense_data)

# Display the budget visualization
st.subheader("Budget Visualization")
fig = go.Figure(data=[
    go.Pie(labels=['Expenses', 'Savings'], values=[total_expenses, savings_goal])
])
fig.update_layout(title_text='Budget Allocation')
st.plotly_chart(fig, use_container_width=True)

# Allow the user to log expenses
st.subheader("Log Expenses")
expense_date = st.date_input("Expense Date")
expense_category = st.selectbox("Expense Category", expense_categories)
expense_amount = st.number_input("Expense Amount", min_value=0.0, step=0.01)

if st.button("Log Expense"):
    # Add the expense to a database or store it in a file
    st.success(f"Logged {expense_amount} for {expense_category} on {expense_date.strftime('%Y-%m-%d')}")
